import { UserRecipe, RecipeForm } from '../types';

export const uploadImage = async (recipeId: number, selectedImage: File): Promise<boolean> => {
  if (!selectedImage) return false;

  const formData = new FormData();
  formData.append('image', selectedImage);

  try {
    const response = await fetch(`/api/recipes/${recipeId}/image`, {
      method: 'POST',
      credentials: 'include',
      body: formData,
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    }

    return true;
  } catch (error) {
    console.error('Error uploading image:', error);
    throw error;
  }
};

export const submitRecipe = async (
  recipeForm: RecipeForm,
  editingRecipe: UserRecipe | null
): Promise<{ success: boolean; recipeId?: number; error?: string }> => {
  try {
    const isEditing = editingRecipe !== null;
    const url = isEditing ? `/api/recipes/${editingRecipe.id}` : '/api/recipes';
    const method = isEditing ? 'PUT' : 'POST';

    const response = await fetch(url, {
      method,
      headers: {
        'Content-Type': 'application/json',
      },
      credentials: 'include',
      body: JSON.stringify({
        ...recipeForm,
        ingredients: recipeForm.ingredients.filter(ing => ing.trim() !== '')
      }),
    });

    if (response.ok) {
      const data = await response.json();
      const recipeId = data.recipe?.id || editingRecipe?.id;
      return { success: true, recipeId };
    } else {
      const error = await response.json();
      return { success: false, error: error.error || `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ ${isEditing ? '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏' : '–¥–æ–±–∞–≤–ª–µ–Ω–∏–∏'} —Ä–µ—Ü–µ–ø—Ç–∞` };
    }
  } catch (error) {
    console.error('Error submitting recipe:', error);
    return { success: false, error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ—Ü–µ–ø—Ç–∞' };
  }
};

export const publishRecipe = async (recipeId: number): Promise<{ success: boolean; error?: string }> => {
  try {
    const response = await fetch(`/api/recipes/${recipeId}/publish`, {
      method: 'POST',
      credentials: 'include',
    });

    if (response.ok) {
      return { success: true };
    } else {
      const error = await response.json();
      return { success: false, error: error.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞' };
    }
  } catch (error) {
    console.error('Error promoting recipe:', error);
    return { success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞' };
  }
};

export const deleteRecipe = async (recipeId: number): Promise<{ success: boolean; error?: string }> => {
  try {
    const response = await fetch(`/api/recipes/${recipeId}`, {
      method: 'DELETE',
      credentials: 'include',
    });

    if (response.ok) {
      return { success: true };
    } else {
      const error = await response.json();
      return { success: false, error: error.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞' };
    }
  } catch (error) {
    console.error('Error deleting recipe:', error);
    return { success: false, error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞' };
  }
};

export const unpublishRecipe = async (recipeId: number): Promise<{ success: boolean; error?: string }> => {
  try {
    const response = await fetch(`/api/recipes/${recipeId}/publish`, {
      method: 'DELETE',
      credentials: 'include',
    });

    if (response.ok) {
      return { success: true };
    } else {
      const error = await response.json();
      return { success: false, error: error.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏' };
    }
  } catch (error) {
    console.error('Error unpublishing recipe:', error);
    return { success: false, error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏' };
  }
};

export const shareRecipe = async (recipe: UserRecipe): Promise<void> => {
  if (navigator.share) {
    try {
      await navigator.share({
        title: recipe.title,
        text: `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å ${recipe.title} - ${recipe.description}`,
        url: window.location.href
      });
    } catch {
      console.log('Sharing cancelled');
    }
  } else {
    const shareText = `üçΩÔ∏è ${recipe.title}\n\n${recipe.description}\n\n‚è±Ô∏è ${recipe.time} | üë• ${recipe.servings} –ø–æ—Ä—Ü–∏–π | üî• ${recipe.difficulty}\n\n–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n${recipe.ingredients.map((ing: string) => `‚Ä¢ ${ing}`).join('\n')}\n\n–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:\n${recipe.instructions}\n\nüîó ${window.location.href}`;
    
    try {
      await navigator.clipboard.writeText(shareText);
      alert('–†–µ—Ü–µ–ø—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    } catch {
      alert(`–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–µ—Ü–µ–ø—Ç:\n\n${shareText}`);
    }
  }
};
